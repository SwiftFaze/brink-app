package com.brink.model.ui;import com.brink.model.dto.AbletonProjectData.AbletonAudioTrack;import com.brink.model.dto.AbletonProjectData.AbletonGroupTrack;import com.brink.model.dto.AbletonProjectData.AbletonMidiTrack;import com.brink.model.dto.AbletonProjectData.AbletonTracks;import javafx.beans.property.SimpleIntegerProperty;import javafx.beans.property.SimpleStringProperty;import javafx.scene.control.TableColumn;import javafx.scene.control.TableView;import javafx.scene.layout.VBox;public class AbletonTrackTableView extends VBox {    public AbletonTrackTableView(AbletonTracks tracks) {        setSpacing(12);        setStyle("-fx-padding: 10;");        TableView<AbletonAudioTrack> audioTable = createAudioTrackTable();        TableView<AbletonMidiTrack> midiTable = createMidiTrackTable();        TableView<AbletonGroupTrack> groupTable = createGroupTrackTable();        // If there are audio tracks, add them to the table        if (tracks != null) {            if (tracks.getAudioTracks() != null) {                audioTable.getItems().addAll(tracks.getAudioTracks());            }            if (tracks.getMidiTracks() != null) {                midiTable.getItems().addAll(tracks.getMidiTracks());            }            if (tracks.getGroupTracks() != null) {                groupTable.getItems().addAll(tracks.getGroupTracks());            }        }        // Add the table to the view        getChildren().add(audioTable);        getChildren().add(midiTable);        getChildren().add(groupTable);    }    private static TableView<AbletonAudioTrack> createAudioTrackTable() {        // Create the TableView for AbletonAudioTrack        TableView<AbletonAudioTrack> table = new TableView<>();        table.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);        // ID Column        TableColumn<AbletonAudioTrack, Integer> idCol = new TableColumn<>("ID");        idCol.setCellValueFactory(cellData -> new SimpleIntegerProperty(cellData.getValue().getId()).asObject());        // LomId Column        TableColumn<AbletonAudioTrack, Integer> lomIdCol = new TableColumn<>("Lom ID");        lomIdCol.setCellValueFactory(cellData -> new SimpleIntegerProperty(cellData.getValue().getLomId()).asObject());        // Name Column        TableColumn<AbletonAudioTrack, String> nameCol = new TableColumn<>("Name");        nameCol.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getTrackName().getEffectiveName()));        // Add the columns to the table        table.getColumns().addAll(idCol, lomIdCol, nameCol);        return table;    }    private static TableView<AbletonMidiTrack> createMidiTrackTable() {        // Create the TableView for AbletonAudioTrack        TableView<AbletonMidiTrack> table = new TableView<>();        table.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);        // ID Column        TableColumn<AbletonMidiTrack, Integer> idCol = new TableColumn<>("ID");        idCol.setCellValueFactory(cellData -> new SimpleIntegerProperty(cellData.getValue().getId()).asObject());        // LomId Column        TableColumn<AbletonMidiTrack, Integer> lomIdCol = new TableColumn<>("Lom ID");        lomIdCol.setCellValueFactory(cellData -> new SimpleIntegerProperty(cellData.getValue().getLomId()).asObject());        // Name Column        TableColumn<AbletonMidiTrack, String> nameCol = new TableColumn<>("Name");        nameCol.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getTrackName().getEffectiveName()));        // Add the columns to the table        table.getColumns().addAll(idCol, lomIdCol, nameCol);        return table;    }    private static TableView<AbletonGroupTrack> createGroupTrackTable() {        // Create the TableView for AbletonAudioTrack        TableView<AbletonGroupTrack> table = new TableView<>();        table.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);        // ID Column        TableColumn<AbletonGroupTrack, Integer> idCol = new TableColumn<>("ID");        idCol.setCellValueFactory(cellData -> new SimpleIntegerProperty(cellData.getValue().getId()).asObject());        // LomId Column        TableColumn<AbletonGroupTrack, Integer> lomIdCol = new TableColumn<>("Lom ID");        lomIdCol.setCellValueFactory(cellData -> new SimpleIntegerProperty(cellData.getValue().getLomId()).asObject());        // Name Column        TableColumn<AbletonGroupTrack, String> nameCol = new TableColumn<>("Name");        nameCol.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getTrackName().getEffectiveName()));        // Add the columns to the table        table.getColumns().addAll(idCol, lomIdCol, nameCol);        return table;    }}