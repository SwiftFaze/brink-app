package com.brink;import com.brink.model.ProjectSummary;import com.brink.model.dto.AbletonProject;import com.brink.model.ui.AbletonProjectVBoxView;import com.brink.shared.AbletonProjectService;import javafx.application.Application;import javafx.application.Platform;import javafx.beans.property.SimpleBooleanProperty;import javafx.beans.property.SimpleStringProperty;import javafx.concurrent.Task;import javafx.geometry.Pos;import javafx.scene.Scene;import javafx.scene.control.*;import javafx.scene.layout.*;import javafx.scene.paint.Color;import javafx.scene.shape.Circle;import javafx.stage.Stage;import java.io.*;import java.nio.charset.StandardCharsets;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.attribute.BasicFileAttributes;import java.time.LocalDateTime;import java.time.ZoneId;import java.time.format.DateTimeFormatter;import java.util.ArrayList;import java.util.List;import java.util.zip.GZIPInputStream;public class Brink extends Application {    private final List<File> alsFiles = new ArrayList<>();    private TextField projectFolderPath = new TextField("R:\\MUSIC\\ABLETON PROJECTS\\11\\2025");    private TableView<File> projectFileList = new TableView<>();    private ProjectSummary selectedProjectSummary = new ProjectSummary();    private VBox projectInfoBox = new VBox();    private DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");    @Override    public void start(Stage primaryStage) {        primaryStage.setTitle("Brink");        Label projectNameLabel = new Label("Project name: ");        Label createdDateLabel = new Label("Creation date: ");        projectFileList.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);        // Git column        TableColumn<File, Boolean> gitCol = new TableColumn<>();        gitCol.setCellValueFactory(data -> {            File parent = data.getValue().getParentFile();            boolean hasGit = new File(parent, ".git").exists();            return new SimpleBooleanProperty(hasGit);        });        gitCol.setCellFactory(col -> new TableCell<>() {            @Override            protected void updateItem(Boolean item, boolean empty) {                super.updateItem(item, empty);                if (empty || item == null) {                    setGraphic(null);                } else {                    Circle light = new Circle(5, item ? Color.LIMEGREEN : Color.RED);                    setGraphic(light);                }            }        });        gitCol.setPrefWidth(20);        // Name and Date columns        TableColumn<File, String> nameCol = new TableColumn<>("Project name");        nameCol.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getName()));        TableColumn<File, String> dateCol = new TableColumn<>("Creation date");        dateCol.setCellValueFactory(data -> {            LocalDateTime ldt = getFileLocalDateTime(data.getValue());            String formatted = (ldt != null) ? ldt.format(formatter) : "N/A";            return new SimpleStringProperty(formatted);        });        projectFileList.getColumns().addAll(gitCol, nameCol, dateCol);        // Folder selection controls        Label pathLabel = new Label("Enter folder path:");        Button loadButton = new Button("Load .als Files");        onProjectFolderChange(loadButton);        VBox formLayout = new VBox(10, pathLabel, projectFolderPath, loadButton);        formLayout.setStyle("-fx-padding: 10;");        projectInfoBox.getChildren().addAll(projectNameLabel, createdDateLabel);        // Spinner overlay        ProgressIndicator loadingSpinner = new ProgressIndicator();        loadingSpinner.setMaxSize(100, 100);        loadingSpinner.setVisible(false);        VBox spinnerOverlay = new VBox(loadingSpinner);        spinnerOverlay.setAlignment(Pos.CENTER);        spinnerOverlay.setStyle("-fx-background-color: rgba(0, 0, 0, 0.3);");        spinnerOverlay.setVisible(false);        // SplitPane with Table and Details        SplitPane splitPane = new SplitPane(projectFileList, projectInfoBox);        splitPane.setDividerPositions(0.25);        VBox mainLayout = new VBox();        mainLayout.getChildren().addAll(createMenuHeader(), splitPane, formLayout);        StackPane rootPane = new StackPane();        rootPane.getChildren().addAll(mainLayout, spinnerOverlay);        Scene scene = new Scene(rootPane, 900, 500);        primaryStage.setScene(scene);        primaryStage.show();        // Selection listener        projectFileList.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> {            if (newVal != null) {                spinnerOverlay.setVisible(true);                loadingSpinner.setVisible(true);                Task<AbletonProject> loadTask = new Task<>() {                    @Override                    protected AbletonProject call() throws Exception {                        Platform.runLater(() -> {                            selectedProjectSummary.setProjectName(newVal.getName());                            selectedProjectSummary.setCreatedDate(getFileLocalDateTime(newVal));                        });                        String xml = decompressGzipFileToString(newVal);                        return AbletonProjectService.convert2AbletonProject(xml);                    }                    @Override                    protected void succeeded() {                        AbletonProject project = getValue();                        Platform.runLater(() -> {                            if (project != null) {                                AbletonProjectVBoxView projectView = new AbletonProjectVBoxView(project);                                projectInfoBox.getChildren().setAll(projectView);                            } else {                                projectInfoBox.getChildren().setAll(new Label("Failed to load project."));                            }                            projectNameLabel.setText("Project name: " + selectedProjectSummary.getProjectName());                            LocalDateTime createdDate = selectedProjectSummary.getCreatedDate();                            String formattedDate = (createdDate != null) ? createdDate.format(formatter) : "N/A";                            createdDateLabel.setText("Creation date: " + formattedDate);                            spinnerOverlay.setVisible(false);                            loadingSpinner.setVisible(false);                        });                    }                    @Override                    protected void failed() {                        getException().printStackTrace();                        Platform.runLater(() -> {                            projectInfoBox.getChildren().setAll(new Label("Error loading project."));                            spinnerOverlay.setVisible(false);                            loadingSpinner.setVisible(false);                        });                    }                };                new Thread(loadTask).start();            }        });    }    private void onProjectFolderChange(Button loadButton) {        loadButton.setOnAction(e -> {            File folder = new File(projectFolderPath.getText());            if (folder.exists() && folder.isDirectory()) {                alsFiles.clear();                findAlsFiles(folder, alsFiles);                projectFileList.getItems().setAll(alsFiles);            }        });    }    private static LocalDateTime getFileLocalDateTime(File file) {        try {            Path path = file.toPath();            BasicFileAttributes attrs = Files.readAttributes(path, BasicFileAttributes.class);            return LocalDateTime.ofInstant(attrs.creationTime().toInstant(), ZoneId.systemDefault());        } catch (IOException e) {            return null;        }    }    private String decompressGzipFileToString(File file) throws IOException {        try (GZIPInputStream gzipInputStream = new GZIPInputStream(new FileInputStream(file));             InputStreamReader inputStreamReader = new InputStreamReader(gzipInputStream, StandardCharsets.UTF_8);             BufferedReader bufferedReader = new BufferedReader(inputStreamReader)) {            StringBuilder output = new StringBuilder();            String line;            while ((line = bufferedReader.readLine()) != null) {                output.append(line).append("\n");            }            return output.toString();        }    }    private void findAlsFiles(File folder, List<File> alsFiles) {        if (folder.getName().equalsIgnoreCase("Backup")) return;        File[] files = folder.listFiles((dir, name) -> name.toLowerCase().endsWith(".als"));        if (files != null) {            for (File file : files) alsFiles.add(file);        }        File[] subDirs = folder.listFiles(File::isDirectory);        if (subDirs != null) {            for (File subDir : subDirs) {                if (!subDir.getName().equalsIgnoreCase("Backup")) {                    findAlsFiles(subDir, alsFiles);                }            }        }    }    private static MenuBar createMenuHeader() {        MenuBar menuBar = new MenuBar();        Menu fileMenu = new Menu("File");        MenuItem newItem = new MenuItem("New");        MenuItem openItem = new MenuItem("Open");        MenuItem exitItem = new MenuItem("Exit");        exitItem.setOnAction(e -> System.exit(0));        fileMenu.getItems().addAll(newItem, openItem, exitItem);        menuBar.getMenus().add(fileMenu);        return menuBar;    }    public static void main(String[] args) {        launch(args);    }}